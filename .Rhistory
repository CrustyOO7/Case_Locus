#plot development pattern over the years
ggmap(map1) +
geom_point(data = sales, aes(x = lon, y = lat, color = year_built))
# Use base_layer argument to ggmap() to specify data and x, y mappings
ggmap(map1, base_layer = ggplot(sales, aes(x = lon, y = lat ))) +
geom_point(aes(col = year_built))
# Plot house sales using qmplot(), it grabs a map by itself.
qmplot(lon, lat, data = sales, geom = "point", color = bedrooms)
# 2 -----------------------------------------------------
# get ward level data
pathname <- c("D:/NR Win folders/Documents/A folder/Data Science/R/R working with geospacial data/01_corv_wards.rds")
ward_sales <- readRDS(pathname)
head(ward_sales)
names(ward_sales)
# Add a point layer with color mapped to ward
qmplot(lon, lat, data = ward_sales, geom = "point")
# alternative: but this alternative cuts off part of the wards
ggmap(map1) +
geom_point(aes(lon,lat), data = ward_sales)
# fix cropping
ggmap(map1, extent = "normal", maprange = FALSE,
base_layer = ggplot(data = ward_sales, aes(lon, lat))) +
geom_polygon(aes(group = group, fill = ward), alpha = 0.8)
# make plot of avg_price on ward level
ggmap(map1, extent = "normal", maprange = FALSE,
base_layer = ggplot(data = ward_sales, aes(lon, lat))) +
geom_polygon(aes(group = group, fill = avg_price), alpha = 0.8)
# get price prediction data data
pathname <- c("D:/NR Win folders/Documents/A folder/Data Science/R/R working with geospacial data/01_corv_predicted_grid.rds")
preds <- readRDS(pathname)
head(preds)
# make a heat map out of prediction data. This is raster data!!
map1_bw <- get_map(corvallis, zoom = 13, maptype = "toner", source = "stamen", color = "bw")
ggmap(map1_bw)
ggmap(map1_bw, baselayer = ggplot(preds, aes(lon, lat))) +
geom_tile(data = preds, aes(fill = predicted_price), alpha = 0.7)
# load libraries
library(tidyverse)
# load libraries
library(tidyverse)
library(tidyverse)
# clean workspace
rm(list=ls())
# load libraries
library(tidyverse)
library(ggmap)
library(sf)
library(tmap)
library(stringr)
library(units)
# GET shape files -----------
# set path
path1 <- c("D:/NR Win folders/Documents/A folder/Data Science/R/Case_Locus")
setwd(path1)
getwd()
# "/geoserver/bm_bike/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeName=bm_bike:villo&amp;outputFormat=shape-zip"
villo_shp <- st_read("villo/villo.shp")
plot(villo_shp$geometry)
head(villo_shp)
st_crs(villo_shp)
municipalities_shp <- st_read("municipality/municipality.shp")
plot(municipalities_shp$geometry)
head(municipalities_shp)
st_crs(municipalities_shp)
# visualise villo stations and municipalities Brussels
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_shp) +
tm_dots(size = 0.1, shape = 1, col = "blue")
# possible key to link on
unique(villo_shp$mu_nl)
unique(municipalities_shp$name_dut)
# make levels the same, they are in same position so ok to do this
levels(municipalities_shp$name_dut) = levels(villo_shp$mu_nl)
# spatial join
villo_and_municipalities_shp <- st_join(villo_shp, municipalities_shp)
# some extra calculations
municipalities_shp$area <- st_area(municipalities_shp)
municipalities_centroids_shp <- st_centroid(municipalities_shp)
dim(st_distance(villo_shp))
plot(st_geometry(st_centroid(municipalities_shp)))
# some plots, check crs's first
st_crs(municipalities_shp)
st_crs(villo_shp)
st_crs(villo_and_municipalities_shp)
tmap_mode("view")
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "national_c", size = 0.1) +
tm_legend(show = FALSE) +
tm_shape(municipalities_centroids_shp) +
tm_dots()
tmap_mode("plot")
# ggplot(villo_and_municipalities_shp) +
#   geom_sf()
# calculate villo station density
villo_density_shp <- villo_and_municipalities_shp %>%
group_by(national_c, name_dut, area) %>%
summarise(count = n()) %>%
mutate(density = count / area)  %>%
arrange(desc(density)) %>%
ungroup()
# join density data to centroid data
municipalities_centroids_shp
villo_density <- st_set_geometry(villo_density_shp, NULL)
municipalities_centroids_shp <- left_join(municipalities_centroids_shp,
select(villo_density, national_c, count, density),
by = "national_c")
# villo_density_shp
# class(villo_density_shp$area[1])
# municipalities_centroids_shp
# class(municipalities_centroids_shp$area[1])
# set_units(municipalities_centroids_shp$area, km^2)
# transform units to be more informative
units(municipalities_centroids_shp$area) <- with(ud_units, km^2)
municipalities_centroids_shp$density <- municipalities_centroids_shp$density * 1000000
municipalities_centroids_shp$density <- set_units(municipalities_centroids_shp$density, km^-2)
# plot villo station density's
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "black", size = 0.07) +
# tm_legend(show = FALSE) +
tm_shape(municipalities_centroids_shp) +
tm_symbols(size = "density", alpha = 0.5, scale = 2) +
tm_scale_bar()
villo_and_municipalities_shp
# calculate distances
villo_distances <- st_distance(villo_and_municipalities_shp)
dim(villo_distances)
str(villo_distances)
villo_distances <- as.tibble(villo_distances)
# Find distance to the nearest vello station
min_distance <- c()
for (i in 1:nrow(villo_distances)) {
villo_distances[i,i] <- 500000
min_distance[i] <- min(villo_distances[i,])
}
length(min_distance)
names(min_distance)
str(min_distance)
min_distance <- tibble(min_distance)
summary(min_distance)
boxplot(min_distance)
ggplot() +
geom_boxplot(data = min_distance, aes(x = as.factor(""), y = min_distance)) +
ggtitle("distance to nearest villo station in meters") +
labs(y = "minimum distance in meter", x = "")
arrange(min_distance, min_distance)
arrange(min_distance, desc(min_distance))
villo_and_municipalities_shp$min_distance <- min_distance$min_distance
ggplot(villo_and_municipalities_shp) +
geom_boxplot(aes(x = name_dut, y = min_distance)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
municipalities_min_distance <- villo_and_municipalities_shp %>%
group_by(national_c, name_dut) %>%
summarise(avg_min_distance = mean(min_distance)) %>%
arrange(desc(avg_min_distance)) %>%
ungroup() %>%
st_drop_geometry()
municipalities_min_distance
municipalities_centroids_shp <- left_join(municipalities_centroids_shp, municipalities_min_distance, by = "national_c")
# plot station
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "black", size = 0.07) +
tm_shape(municipalities_centroids_shp) +
tm_bubbles(size = "avg_min_distance", alpha = 0.5, scale = 3) +
tm_scale_bar() +
tm_layout(title = "Average distance to nearest villo station per district")
# clean workspace
rm(list=ls())
# clean workspace
rm(list=ls())
# load libraries
library(tidyverse)
library(ggmap)
library(sf)
library(tmap)
library(stringr)
library(units)
# GET shape files -----------
# set path
path1 <- c("D:/NR Win folders/Documents/A folder/Data Science/R/Case_Locus")
setwd(path1)
getwd()
# "/geoserver/bm_bike/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeName=bm_bike:villo&amp;outputFormat=shape-zip"
villo_shp <- st_read("villo/villo.shp")
plot(villo_shp$geometry)
head(villo_shp)
st_crs(villo_shp)
municipalities_shp <- st_read("municipality/municipality.shp")
plot(municipalities_shp$geometry)
head(municipalities_shp)
st_crs(municipalities_shp)
# visualise villo stations and municipalities Brussels
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_shp) +
tm_dots(size = 0.1, shape = 1, col = "blue")
# possible key to link on
unique(villo_shp$mu_nl)
unique(municipalities_shp$name_dut)
# make levels the same, they are in same position so ok to do this
levels(municipalities_shp$name_dut) = levels(villo_shp$mu_nl)
# spatial join
villo_and_municipalities_shp <- st_join(villo_shp, municipalities_shp)
# some extra calculations
municipalities_shp$area <- st_area(municipalities_shp)
municipalities_centroids_shp <- st_centroid(municipalities_shp)
dim(st_distance(villo_shp))
plot(st_geometry(st_centroid(municipalities_shp)))
# some plots, check crs's first
st_crs(municipalities_shp)
st_crs(villo_shp)
st_crs(villo_and_municipalities_shp)
tmap_mode("view")
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "national_c", size = 0.1) +
tm_legend(show = FALSE) +
tm_shape(municipalities_centroids_shp) +
tm_dots()
tmap_mode("plot")
# ggplot(villo_and_municipalities_shp) +
#   geom_sf()
# calculate villo station density
villo_density_shp <- villo_and_municipalities_shp %>%
group_by(national_c, name_dut, area) %>%
summarise(count = n()) %>%
mutate(density = count / area)  %>%
arrange(desc(density)) %>%
ungroup()
# join density data to centroid data
municipalities_centroids_shp
villo_density <- st_set_geometry(villo_density_shp, NULL)
municipalities_centroids_shp <- left_join(municipalities_centroids_shp,
select(villo_density, national_c, count, density),
by = "national_c")
villo_density_shp
villo_density_shp
villo_and_municipalities_shp
# clean workspace
rm(list=ls())
# clean workspace
rm(list=ls())
# load libraries
library(tidyverse)
library(ggmap)
library(sf)
library(tmap)
library(stringr)
library(units)
# GET shape files -----------
# set path
path1 <- c("D:/NR Win folders/Documents/A folder/Data Science/R/Case_Locus")
setwd(path1)
getwd()
# "/geoserver/bm_bike/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeName=bm_bike:villo&amp;outputFormat=shape-zip"
villo_shp <- st_read("villo/villo.shp")
plot(villo_shp$geometry)
head(villo_shp)
st_crs(villo_shp)
municipalities_shp <- st_read("municipality/municipality.shp")
plot(municipalities_shp$geometry)
head(municipalities_shp)
st_crs(municipalities_shp)
# visualise villo stations and municipalities Brussels
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_shp) +
tm_dots(size = 0.1, shape = 1, col = "blue")
# possible key to link on
unique(villo_shp$mu_nl)
unique(municipalities_shp$name_dut)
# make levels the same, they are in same position so ok to do this
levels(municipalities_shp$name_dut) = levels(villo_shp$mu_nl)
# some extra calculations
municipalities_shp$area <- st_area(municipalities_shp)
municipalities_centroids_shp <- st_centroid(municipalities_shp)
dim(st_distance(villo_shp))
# spatial join
villo_and_municipalities_shp <- st_join(villo_shp, municipalities_shp)
# check centroid geom
plot(st_geometry(st_centroid(municipalities_shp)))
# some plots, check crs's first
st_crs(municipalities_shp)
st_crs(villo_shp)
st_crs(villo_and_municipalities_shp)
tmap_mode("view")
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "national_c", size = 0.1) +
tm_legend(show = FALSE) +
tm_shape(municipalities_centroids_shp) +
tm_dots()
tmap_mode("plot")
# ggplot(villo_and_municipalities_shp) +
#   geom_sf()
# calculate villo station density
villo_density_shp <- villo_and_municipalities_shp %>%
group_by(national_c, name_dut, area) %>%
summarise(count = n()) %>%
mutate(density = count / area)  %>%
arrange(desc(density)) %>%
ungroup()
# join density data to centroid data
municipalities_centroids_shp
villo_density <- st_set_geometry(villo_density_shp, NULL)
municipalities_centroids_shp <- left_join(municipalities_centroids_shp,
select(villo_density, national_c, count, density),
by = "national_c")
# villo_density_shp
# class(villo_density_shp$area[1])
# municipalities_centroids_shp
# class(municipalities_centroids_shp$area[1])
# set_units(municipalities_centroids_shp$area, km^2)
# transform units to be more informative
units(municipalities_centroids_shp$area) <- with(ud_units, km^2)
municipalities_centroids_shp$density <- municipalities_centroids_shp$density * 1000000
municipalities_centroids_shp$density <- set_units(municipalities_centroids_shp$density, km^-2)
# plot villo station density's
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "black", size = 0.07) +
# tm_legend(show = FALSE) +
tm_shape(municipalities_centroids_shp) +
tm_symbols(size = "density", alpha = 0.5, scale = 2) +
tm_scale_bar()
villo_and_municipalities_shp
# calculate distances
villo_distances <- st_distance(villo_and_municipalities_shp)
dim(villo_distances)
str(villo_distances)
villo_distances <- as.tibble(villo_distances)
# Find distance to the nearest vello station
min_distance <- c()
for (i in 1:nrow(villo_distances)) {
villo_distances[i,i] <- 500000
min_distance[i] <- min(villo_distances[i,])
}
length(min_distance)
names(min_distance)
str(min_distance)
min_distance <- tibble(min_distance)
summary(min_distance)
boxplot(min_distance)
ggplot() +
geom_boxplot(data = min_distance, aes(x = as.factor(""), y = min_distance)) +
ggtitle("distance to nearest villo station in meters") +
labs(y = "minimum distance in meter", x = "")
arrange(min_distance, min_distance)
arrange(min_distance, desc(min_distance))
villo_and_municipalities_shp$min_distance <- min_distance$min_distance
ggplot(villo_and_municipalities_shp) +
geom_boxplot(aes(x = name_dut, y = min_distance)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
municipalities_min_distance <- villo_and_municipalities_shp %>%
group_by(national_c, name_dut) %>%
summarise(avg_min_distance = mean(min_distance)) %>%
arrange(desc(avg_min_distance)) %>%
ungroup() %>%
st_drop_geometry()
municipalities_min_distance
municipalities_centroids_shp <- left_join(municipalities_centroids_shp, municipalities_min_distance, by = "national_c")
# plot station
tm_shape(municipalities_shp) +
tm_borders() +
tm_fill(col = "national_c", alpha = 0.3, legend.show = FALSE) +
tm_text("name_dut", size = 0.5) +
tm_shape(villo_and_municipalities_shp) +
tm_symbols(col = "black", size = 0.07) +
tm_shape(municipalities_centroids_shp) +
tm_bubbles(size = "avg_min_distance", alpha = 0.5, scale = 3) +
tm_scale_bar() +
tm_layout(title = "Average distance to nearest villo station per district")
# clean workspace
rm(list=ls())
# clean workspace
rm(list=ls())
# load libraries
library(tidyverse)
library(sf)
library(tmap)
library(lubridate)
# LOAD DATA IN AND PREP ----------------------
# set path
path1 <- c("D:/NR Win folders/Documents/A folder/Data Science/R/Case_Locus")
setwd(path1)
getwd()
# data set of station CB2105!!
# read in and explore historic data from fiets tellingen data set of station CB2105
api_request <- c("?request=history&featureID=CB2105&startDate=20190304&endDate=20190310&outputFormat=csv")
api_url <- "https://data-mobility.brussels/bike/api/counts/"
week0403 <- read_csv(paste0(api_url, api_request))
head(week0403)
api_request <- c("?request=history&featureID=CB2105&startDate=20190225&endDate=20190303&outputFormat=csv")
week2502 <- read_csv(paste0(api_url, api_request))
head(week2502)
week0403 %>%
glimpse() %>%
summary()
weeks <- rbind(week0403, week2502)
weeks <- weeks %>%
arrange(Date, `Time gap`)
weeks$week <- week(weeks$Date)
weeks$week_day <- wday(weeks$Date, label = TRUE)
# correct for lubridate week function starting on sunday, not correct for week 1?
for(i in 1:nrow(weeks)) {
if (weeks$week_day[i] == "ma") {
weeks$week[i] <- c(week(weeks$Date[i])+1)
}
else {
weeks$week[i] <- c(week(weeks$Date[i]))
}
}
weeks <- weeks %>%
arrange(Date, `Time gap`)
weeks$week_day <- factor(weeks$week_day,levels(weeks$week_day)[c(2:7,1)])
unique(weeks$Date)
week(unique(weeks$Date))
# VISUAL EXPLORATION WITH SOME PLOTS --------------------------
# line plot drukte per dag in week 9
ggplot(filter(weeks, week == 9)) +
geom_line(aes(x = `Time gap`, y = Count, color = as.factor(Date)))
# bar plot drukte in week 9, Time gap omgevormd naar uren van de dag
ggplot(filter(weeks, week == 9)) +
geom_bar(stat = "identity", aes(x = `Time gap`*15/60, y = Count, color = as.factor(week))) +
facet_wrap(~ as.factor(week_day))
# plot drukte in week 10, pas op want stacked als meerdere weken
ggplot(filter(weeks, week == 10)) +
geom_bar(stat = "identity", aes(x = `Time gap`*15/60, y = Count, color = as.factor(week))) +
facet_wrap(~ week_day, ncol = 7)
# plot drukte over de weken van 04/03/2019 heen, pas op want stacked als meerdere weken
ggplot(filter(weeks, week == 10)) +
geom_bar(stat = "identity", aes(x = `Time gap`*15/60, y = Count, color = as.factor(week))) +
facet_wrap(~ week_day, ncol = 7) +
xlab("Hours")
# plot van drukte per dag per week, pieken in de ochtend en avond
ggplot(weeks) +
geom_bar(stat = "identity", aes(x = `Time gap`*15/60, y = Count, color = as.factor(week)), width = 0.25) +
facet_grid(as.factor(week) ~ week_day)
# COUNT PER HOUR -----------------------
# transform counts per quarter to per hour
weeks$hour <- floor(weeks$`Time gap` * 15 / 60)
count_per_hour <- weeks %>%
group_by(Date, week, week_day, hour) %>%
summarise(count = sum(Count),
avg_speed = sum(`Average speed` * Count) / sum(Count))
# plot van drukte per uur per dag per week, pieken in de ochtend en avond
ggplot(count_per_hour) +
geom_bar(stat = "identity", aes(x = hour, y = count, color = as.factor(week))) +
facet_grid(as.factor(week) ~ week_day)
# Does average speed depend on the time in the day? No real visable impact on this graph.
ggplot(count_per_hour) +
geom_bar(stat = "identity", aes(x = hour, y = avg_speed, color = as.factor(week))) +
facet_grid(as.factor(week) ~ week_day)
# UNDER CONSTRUCTION-------------------------------
# api_request <- c("?request=history&featureID=_A&startDate=20190304&endDate=20190310&outputFormat=csv")
# api_url <- "https://data-mobility.brussels/bike/api/counts/"
# test_csv2 <- read_csv(paste0(api_url, api_request))
# head(test_csv2)
#
# test_csv2 %>%
#   glimpse() %>%
#   summary()
#
#
#
# # read in telpaal devices dataset
# test_csv2 <- read_csv("http://data-mobility.brussels/geoserver/bm_bike/wfs?service=wfs&version=1.1.0&request=GetFeature&typeName=bm_bike%3Art_counting&outputFormat=csv")
# head(test_csv2)
#
# test_csv1 %>%
#   glimpse() %>%
#   summary()
#
# test_csv4_st <- st_as_sf(test_csv4, coords = geom, crs = 4326)
#
#
# pt1 = st_point(c(0,1))
# class(pt1)
# pt2 = st_point(c(1,1))
# st_sfc(pt1, pt2)
# d = data.frame(a = 1:2)
# d$geom = st_sfc(pt1, pt2)
# df = st_as_sf(d)
# d$geom = c("POINT(0 0)", "POINT(0 1)")
# df = st_as_sf(d, wkt = "geom")
